/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef slave_services_TYPES_H
#define slave_services_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace slave {

typedef struct _ActiveParams__isset {
  _ActiveParams__isset() : client_ip(false), client_port(false), fid(false), restart_at(false), transfer_buffer_size(false), server_ip(false), server_port(false), trans_id(false) {}
  bool client_ip;
  bool client_port;
  bool fid;
  bool restart_at;
  bool transfer_buffer_size;
  bool server_ip;
  bool server_port;
  bool trans_id;
} _ActiveParams__isset;

class ActiveParams {
 public:

  static const char* ascii_fingerprint; // = "34B904D81E2BA7C35715651EE158756C";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0xB9,0x04,0xD8,0x1E,0x2B,0xA7,0xC3,0x57,0x15,0x65,0x1E,0xE1,0x58,0x75,0x6C};

  ActiveParams() : client_ip(0), client_port(0), fid(0), restart_at(0), transfer_buffer_size(0), server_ip(0), server_port(0), trans_id(0) {
  }

  virtual ~ActiveParams() throw() {}

  int64_t client_ip;
  int32_t client_port;
  int64_t fid;
  int64_t restart_at;
  int32_t transfer_buffer_size;
  int64_t server_ip;
  int32_t server_port;
  int64_t trans_id;

  _ActiveParams__isset __isset;

  void __set_client_ip(const int64_t val) {
    client_ip = val;
  }

  void __set_client_port(const int32_t val) {
    client_port = val;
  }

  void __set_fid(const int64_t val) {
    fid = val;
  }

  void __set_restart_at(const int64_t val) {
    restart_at = val;
  }

  void __set_transfer_buffer_size(const int32_t val) {
    transfer_buffer_size = val;
  }

  void __set_server_ip(const int64_t val) {
    server_ip = val;
  }

  void __set_server_port(const int32_t val) {
    server_port = val;
  }

  void __set_trans_id(const int64_t val) {
    trans_id = val;
  }

  bool operator == (const ActiveParams & rhs) const
  {
    if (!(client_ip == rhs.client_ip))
      return false;
    if (!(client_port == rhs.client_port))
      return false;
    if (!(fid == rhs.fid))
      return false;
    if (!(restart_at == rhs.restart_at))
      return false;
    if (!(transfer_buffer_size == rhs.transfer_buffer_size))
      return false;
    if (!(server_ip == rhs.server_ip))
      return false;
    if (!(server_port == rhs.server_port))
      return false;
    if (!(trans_id == rhs.trans_id))
      return false;
    return true;
  }
  bool operator != (const ActiveParams &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ActiveParams & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ActiveParams &a, ActiveParams &b);

typedef struct _PasvParams__isset {
  _PasvParams__isset() : server_ip(false), server_port(false), fid(false), restart_at(false), transfer_buffer_size(false), trans_id(false) {}
  bool server_ip;
  bool server_port;
  bool fid;
  bool restart_at;
  bool transfer_buffer_size;
  bool trans_id;
} _PasvParams__isset;

class PasvParams {
 public:

  static const char* ascii_fingerprint; // = "03C5F3224DEBDE4AAB1009EA9007C8A8";
  static const uint8_t binary_fingerprint[16]; // = {0x03,0xC5,0xF3,0x22,0x4D,0xEB,0xDE,0x4A,0xAB,0x10,0x09,0xEA,0x90,0x07,0xC8,0xA8};

  PasvParams() : server_ip(0), server_port(0), fid(0), restart_at(0), transfer_buffer_size(0), trans_id(0) {
  }

  virtual ~PasvParams() throw() {}

  int64_t server_ip;
  int32_t server_port;
  int64_t fid;
  int64_t restart_at;
  int32_t transfer_buffer_size;
  int64_t trans_id;

  _PasvParams__isset __isset;

  void __set_server_ip(const int64_t val) {
    server_ip = val;
  }

  void __set_server_port(const int32_t val) {
    server_port = val;
  }

  void __set_fid(const int64_t val) {
    fid = val;
  }

  void __set_restart_at(const int64_t val) {
    restart_at = val;
  }

  void __set_transfer_buffer_size(const int32_t val) {
    transfer_buffer_size = val;
  }

  void __set_trans_id(const int64_t val) {
    trans_id = val;
  }

  bool operator == (const PasvParams & rhs) const
  {
    if (!(server_ip == rhs.server_ip))
      return false;
    if (!(server_port == rhs.server_port))
      return false;
    if (!(fid == rhs.fid))
      return false;
    if (!(restart_at == rhs.restart_at))
      return false;
    if (!(transfer_buffer_size == rhs.transfer_buffer_size))
      return false;
    if (!(trans_id == rhs.trans_id))
      return false;
    return true;
  }
  bool operator != (const PasvParams &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PasvParams & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PasvParams &a, PasvParams &b);

typedef struct _StorRetVal__isset {
  _StorRetVal__isset() : msg(false), size(false) {}
  bool msg;
  bool size;
} _StorRetVal__isset;

class StorRetVal {
 public:

  static const char* ascii_fingerprint; // = "1CCCF6FC31CFD1D61BBBB1BAF3590620";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xCC,0xF6,0xFC,0x31,0xCF,0xD1,0xD6,0x1B,0xBB,0xB1,0xBA,0xF3,0x59,0x06,0x20};

  StorRetVal() : msg(), size(0) {
  }

  virtual ~StorRetVal() throw() {}

  std::string msg;
  int64_t size;

  _StorRetVal__isset __isset;

  void __set_msg(const std::string& val) {
    msg = val;
  }

  void __set_size(const int64_t val) {
    size = val;
  }

  bool operator == (const StorRetVal & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    if (!(size == rhs.size))
      return false;
    return true;
  }
  bool operator != (const StorRetVal &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorRetVal & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorRetVal &a, StorRetVal &b);

} // namespace

#endif
