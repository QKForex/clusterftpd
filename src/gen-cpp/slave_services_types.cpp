/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "slave_services_types.h"

#include <algorithm>

namespace slave {

const char* ActiveParams::ascii_fingerprint = "34B904D81E2BA7C35715651EE158756C";
const uint8_t ActiveParams::binary_fingerprint[16] = {0x34,0xB9,0x04,0xD8,0x1E,0x2B,0xA7,0xC3,0x57,0x15,0x65,0x1E,0xE1,0x58,0x75,0x6C};

uint32_t ActiveParams::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->client_ip);
          this->__isset.client_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->client_port);
          this->__isset.client_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->fid);
          this->__isset.fid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->restart_at);
          this->__isset.restart_at = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->transfer_buffer_size);
          this->__isset.transfer_buffer_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->server_ip);
          this->__isset.server_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->server_port);
          this->__isset.server_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->trans_id);
          this->__isset.trans_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ActiveParams::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ActiveParams");

  xfer += oprot->writeFieldBegin("client_ip", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->client_ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("client_port", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->client_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fid", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->fid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("restart_at", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->restart_at);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("transfer_buffer_size", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->transfer_buffer_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("server_ip", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->server_ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("server_port", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->server_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("trans_id", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->trans_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ActiveParams &a, ActiveParams &b) {
  using ::std::swap;
  swap(a.client_ip, b.client_ip);
  swap(a.client_port, b.client_port);
  swap(a.fid, b.fid);
  swap(a.restart_at, b.restart_at);
  swap(a.transfer_buffer_size, b.transfer_buffer_size);
  swap(a.server_ip, b.server_ip);
  swap(a.server_port, b.server_port);
  swap(a.trans_id, b.trans_id);
  swap(a.__isset, b.__isset);
}

const char* PasvParams::ascii_fingerprint = "03C5F3224DEBDE4AAB1009EA9007C8A8";
const uint8_t PasvParams::binary_fingerprint[16] = {0x03,0xC5,0xF3,0x22,0x4D,0xEB,0xDE,0x4A,0xAB,0x10,0x09,0xEA,0x90,0x07,0xC8,0xA8};

uint32_t PasvParams::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->server_ip);
          this->__isset.server_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->server_port);
          this->__isset.server_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->fid);
          this->__isset.fid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->restart_at);
          this->__isset.restart_at = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->transfer_buffer_size);
          this->__isset.transfer_buffer_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->trans_id);
          this->__isset.trans_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PasvParams::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PasvParams");

  xfer += oprot->writeFieldBegin("server_ip", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->server_ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("server_port", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->server_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fid", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->fid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("restart_at", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->restart_at);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("transfer_buffer_size", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->transfer_buffer_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("trans_id", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->trans_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PasvParams &a, PasvParams &b) {
  using ::std::swap;
  swap(a.server_ip, b.server_ip);
  swap(a.server_port, b.server_port);
  swap(a.fid, b.fid);
  swap(a.restart_at, b.restart_at);
  swap(a.transfer_buffer_size, b.transfer_buffer_size);
  swap(a.trans_id, b.trans_id);
  swap(a.__isset, b.__isset);
}

const char* StorRetVal::ascii_fingerprint = "1CCCF6FC31CFD1D61BBBB1BAF3590620";
const uint8_t StorRetVal::binary_fingerprint[16] = {0x1C,0xCC,0xF6,0xFC,0x31,0xCF,0xD1,0xD6,0x1B,0xBB,0xB1,0xBA,0xF3,0x59,0x06,0x20};

uint32_t StorRetVal::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->size);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t StorRetVal::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StorRetVal");

  xfer += oprot->writeFieldBegin("msg", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorRetVal &a, StorRetVal &b) {
  using ::std::swap;
  swap(a.msg, b.msg);
  swap(a.size, b.size);
  swap(a.__isset, b.__isset);
}

} // namespace
