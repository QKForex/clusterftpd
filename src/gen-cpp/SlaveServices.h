/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SlaveServices_H
#define SlaveServices_H

#include <thrift/TDispatchProcessor.h>
#include "slave_services_types.h"

namespace slave {

class SlaveServicesIf {
 public:
  virtual ~SlaveServicesIf() {}
  virtual bool ActiveStoreTransfer(const std::string& ip, const int16_t port, const int64_t fid, const int64_t start_at) = 0;
  virtual bool PasvStoreTransfer(const std::string& ip, const int16_t port, const int64_t fid, const int64_t start_at) = 0;
  virtual bool ActiveRetrieveTransfer(const std::string& ip, const int16_t port, const int64_t fid, const int64_t start_at) = 0;
  virtual bool PasvRetrieveTransfer(const std::string& ip, const int16_t port, const int64_t fid, const int64_t start_at) = 0;
};

class SlaveServicesIfFactory {
 public:
  typedef SlaveServicesIf Handler;

  virtual ~SlaveServicesIfFactory() {}

  virtual SlaveServicesIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SlaveServicesIf* /* handler */) = 0;
};

class SlaveServicesIfSingletonFactory : virtual public SlaveServicesIfFactory {
 public:
  SlaveServicesIfSingletonFactory(const boost::shared_ptr<SlaveServicesIf>& iface) : iface_(iface) {}
  virtual ~SlaveServicesIfSingletonFactory() {}

  virtual SlaveServicesIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SlaveServicesIf* /* handler */) {}

 protected:
  boost::shared_ptr<SlaveServicesIf> iface_;
};

class SlaveServicesNull : virtual public SlaveServicesIf {
 public:
  virtual ~SlaveServicesNull() {}
  bool ActiveStoreTransfer(const std::string& /* ip */, const int16_t /* port */, const int64_t /* fid */, const int64_t /* start_at */) {
    bool _return = false;
    return _return;
  }
  bool PasvStoreTransfer(const std::string& /* ip */, const int16_t /* port */, const int64_t /* fid */, const int64_t /* start_at */) {
    bool _return = false;
    return _return;
  }
  bool ActiveRetrieveTransfer(const std::string& /* ip */, const int16_t /* port */, const int64_t /* fid */, const int64_t /* start_at */) {
    bool _return = false;
    return _return;
  }
  bool PasvRetrieveTransfer(const std::string& /* ip */, const int16_t /* port */, const int64_t /* fid */, const int64_t /* start_at */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _SlaveServices_ActiveStoreTransfer_args__isset {
  _SlaveServices_ActiveStoreTransfer_args__isset() : ip(false), port(false), fid(false), start_at(false) {}
  bool ip;
  bool port;
  bool fid;
  bool start_at;
} _SlaveServices_ActiveStoreTransfer_args__isset;

class SlaveServices_ActiveStoreTransfer_args {
 public:

  SlaveServices_ActiveStoreTransfer_args() : ip(), port(0), fid(0), start_at(0) {
  }

  virtual ~SlaveServices_ActiveStoreTransfer_args() throw() {}

  std::string ip;
  int16_t port;
  int64_t fid;
  int64_t start_at;

  _SlaveServices_ActiveStoreTransfer_args__isset __isset;

  void __set_ip(const std::string& val) {
    ip = val;
  }

  void __set_port(const int16_t val) {
    port = val;
  }

  void __set_fid(const int64_t val) {
    fid = val;
  }

  void __set_start_at(const int64_t val) {
    start_at = val;
  }

  bool operator == (const SlaveServices_ActiveStoreTransfer_args & rhs) const
  {
    if (!(ip == rhs.ip))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(fid == rhs.fid))
      return false;
    if (!(start_at == rhs.start_at))
      return false;
    return true;
  }
  bool operator != (const SlaveServices_ActiveStoreTransfer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SlaveServices_ActiveStoreTransfer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SlaveServices_ActiveStoreTransfer_pargs {
 public:


  virtual ~SlaveServices_ActiveStoreTransfer_pargs() throw() {}

  const std::string* ip;
  const int16_t* port;
  const int64_t* fid;
  const int64_t* start_at;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SlaveServices_ActiveStoreTransfer_result__isset {
  _SlaveServices_ActiveStoreTransfer_result__isset() : success(false) {}
  bool success;
} _SlaveServices_ActiveStoreTransfer_result__isset;

class SlaveServices_ActiveStoreTransfer_result {
 public:

  SlaveServices_ActiveStoreTransfer_result() : success(0) {
  }

  virtual ~SlaveServices_ActiveStoreTransfer_result() throw() {}

  bool success;

  _SlaveServices_ActiveStoreTransfer_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const SlaveServices_ActiveStoreTransfer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SlaveServices_ActiveStoreTransfer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SlaveServices_ActiveStoreTransfer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SlaveServices_ActiveStoreTransfer_presult__isset {
  _SlaveServices_ActiveStoreTransfer_presult__isset() : success(false) {}
  bool success;
} _SlaveServices_ActiveStoreTransfer_presult__isset;

class SlaveServices_ActiveStoreTransfer_presult {
 public:


  virtual ~SlaveServices_ActiveStoreTransfer_presult() throw() {}

  bool* success;

  _SlaveServices_ActiveStoreTransfer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SlaveServices_PasvStoreTransfer_args__isset {
  _SlaveServices_PasvStoreTransfer_args__isset() : ip(false), port(false), fid(false), start_at(false) {}
  bool ip;
  bool port;
  bool fid;
  bool start_at;
} _SlaveServices_PasvStoreTransfer_args__isset;

class SlaveServices_PasvStoreTransfer_args {
 public:

  SlaveServices_PasvStoreTransfer_args() : ip(), port(0), fid(0), start_at(0) {
  }

  virtual ~SlaveServices_PasvStoreTransfer_args() throw() {}

  std::string ip;
  int16_t port;
  int64_t fid;
  int64_t start_at;

  _SlaveServices_PasvStoreTransfer_args__isset __isset;

  void __set_ip(const std::string& val) {
    ip = val;
  }

  void __set_port(const int16_t val) {
    port = val;
  }

  void __set_fid(const int64_t val) {
    fid = val;
  }

  void __set_start_at(const int64_t val) {
    start_at = val;
  }

  bool operator == (const SlaveServices_PasvStoreTransfer_args & rhs) const
  {
    if (!(ip == rhs.ip))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(fid == rhs.fid))
      return false;
    if (!(start_at == rhs.start_at))
      return false;
    return true;
  }
  bool operator != (const SlaveServices_PasvStoreTransfer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SlaveServices_PasvStoreTransfer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SlaveServices_PasvStoreTransfer_pargs {
 public:


  virtual ~SlaveServices_PasvStoreTransfer_pargs() throw() {}

  const std::string* ip;
  const int16_t* port;
  const int64_t* fid;
  const int64_t* start_at;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SlaveServices_PasvStoreTransfer_result__isset {
  _SlaveServices_PasvStoreTransfer_result__isset() : success(false) {}
  bool success;
} _SlaveServices_PasvStoreTransfer_result__isset;

class SlaveServices_PasvStoreTransfer_result {
 public:

  SlaveServices_PasvStoreTransfer_result() : success(0) {
  }

  virtual ~SlaveServices_PasvStoreTransfer_result() throw() {}

  bool success;

  _SlaveServices_PasvStoreTransfer_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const SlaveServices_PasvStoreTransfer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SlaveServices_PasvStoreTransfer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SlaveServices_PasvStoreTransfer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SlaveServices_PasvStoreTransfer_presult__isset {
  _SlaveServices_PasvStoreTransfer_presult__isset() : success(false) {}
  bool success;
} _SlaveServices_PasvStoreTransfer_presult__isset;

class SlaveServices_PasvStoreTransfer_presult {
 public:


  virtual ~SlaveServices_PasvStoreTransfer_presult() throw() {}

  bool* success;

  _SlaveServices_PasvStoreTransfer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SlaveServices_ActiveRetrieveTransfer_args__isset {
  _SlaveServices_ActiveRetrieveTransfer_args__isset() : ip(false), port(false), fid(false), start_at(false) {}
  bool ip;
  bool port;
  bool fid;
  bool start_at;
} _SlaveServices_ActiveRetrieveTransfer_args__isset;

class SlaveServices_ActiveRetrieveTransfer_args {
 public:

  SlaveServices_ActiveRetrieveTransfer_args() : ip(), port(0), fid(0), start_at(0) {
  }

  virtual ~SlaveServices_ActiveRetrieveTransfer_args() throw() {}

  std::string ip;
  int16_t port;
  int64_t fid;
  int64_t start_at;

  _SlaveServices_ActiveRetrieveTransfer_args__isset __isset;

  void __set_ip(const std::string& val) {
    ip = val;
  }

  void __set_port(const int16_t val) {
    port = val;
  }

  void __set_fid(const int64_t val) {
    fid = val;
  }

  void __set_start_at(const int64_t val) {
    start_at = val;
  }

  bool operator == (const SlaveServices_ActiveRetrieveTransfer_args & rhs) const
  {
    if (!(ip == rhs.ip))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(fid == rhs.fid))
      return false;
    if (!(start_at == rhs.start_at))
      return false;
    return true;
  }
  bool operator != (const SlaveServices_ActiveRetrieveTransfer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SlaveServices_ActiveRetrieveTransfer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SlaveServices_ActiveRetrieveTransfer_pargs {
 public:


  virtual ~SlaveServices_ActiveRetrieveTransfer_pargs() throw() {}

  const std::string* ip;
  const int16_t* port;
  const int64_t* fid;
  const int64_t* start_at;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SlaveServices_ActiveRetrieveTransfer_result__isset {
  _SlaveServices_ActiveRetrieveTransfer_result__isset() : success(false) {}
  bool success;
} _SlaveServices_ActiveRetrieveTransfer_result__isset;

class SlaveServices_ActiveRetrieveTransfer_result {
 public:

  SlaveServices_ActiveRetrieveTransfer_result() : success(0) {
  }

  virtual ~SlaveServices_ActiveRetrieveTransfer_result() throw() {}

  bool success;

  _SlaveServices_ActiveRetrieveTransfer_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const SlaveServices_ActiveRetrieveTransfer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SlaveServices_ActiveRetrieveTransfer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SlaveServices_ActiveRetrieveTransfer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SlaveServices_ActiveRetrieveTransfer_presult__isset {
  _SlaveServices_ActiveRetrieveTransfer_presult__isset() : success(false) {}
  bool success;
} _SlaveServices_ActiveRetrieveTransfer_presult__isset;

class SlaveServices_ActiveRetrieveTransfer_presult {
 public:


  virtual ~SlaveServices_ActiveRetrieveTransfer_presult() throw() {}

  bool* success;

  _SlaveServices_ActiveRetrieveTransfer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SlaveServices_PasvRetrieveTransfer_args__isset {
  _SlaveServices_PasvRetrieveTransfer_args__isset() : ip(false), port(false), fid(false), start_at(false) {}
  bool ip;
  bool port;
  bool fid;
  bool start_at;
} _SlaveServices_PasvRetrieveTransfer_args__isset;

class SlaveServices_PasvRetrieveTransfer_args {
 public:

  SlaveServices_PasvRetrieveTransfer_args() : ip(), port(0), fid(0), start_at(0) {
  }

  virtual ~SlaveServices_PasvRetrieveTransfer_args() throw() {}

  std::string ip;
  int16_t port;
  int64_t fid;
  int64_t start_at;

  _SlaveServices_PasvRetrieveTransfer_args__isset __isset;

  void __set_ip(const std::string& val) {
    ip = val;
  }

  void __set_port(const int16_t val) {
    port = val;
  }

  void __set_fid(const int64_t val) {
    fid = val;
  }

  void __set_start_at(const int64_t val) {
    start_at = val;
  }

  bool operator == (const SlaveServices_PasvRetrieveTransfer_args & rhs) const
  {
    if (!(ip == rhs.ip))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(fid == rhs.fid))
      return false;
    if (!(start_at == rhs.start_at))
      return false;
    return true;
  }
  bool operator != (const SlaveServices_PasvRetrieveTransfer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SlaveServices_PasvRetrieveTransfer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SlaveServices_PasvRetrieveTransfer_pargs {
 public:


  virtual ~SlaveServices_PasvRetrieveTransfer_pargs() throw() {}

  const std::string* ip;
  const int16_t* port;
  const int64_t* fid;
  const int64_t* start_at;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SlaveServices_PasvRetrieveTransfer_result__isset {
  _SlaveServices_PasvRetrieveTransfer_result__isset() : success(false) {}
  bool success;
} _SlaveServices_PasvRetrieveTransfer_result__isset;

class SlaveServices_PasvRetrieveTransfer_result {
 public:

  SlaveServices_PasvRetrieveTransfer_result() : success(0) {
  }

  virtual ~SlaveServices_PasvRetrieveTransfer_result() throw() {}

  bool success;

  _SlaveServices_PasvRetrieveTransfer_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const SlaveServices_PasvRetrieveTransfer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SlaveServices_PasvRetrieveTransfer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SlaveServices_PasvRetrieveTransfer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SlaveServices_PasvRetrieveTransfer_presult__isset {
  _SlaveServices_PasvRetrieveTransfer_presult__isset() : success(false) {}
  bool success;
} _SlaveServices_PasvRetrieveTransfer_presult__isset;

class SlaveServices_PasvRetrieveTransfer_presult {
 public:


  virtual ~SlaveServices_PasvRetrieveTransfer_presult() throw() {}

  bool* success;

  _SlaveServices_PasvRetrieveTransfer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SlaveServicesClient : virtual public SlaveServicesIf {
 public:
  SlaveServicesClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  SlaveServicesClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool ActiveStoreTransfer(const std::string& ip, const int16_t port, const int64_t fid, const int64_t start_at);
  void send_ActiveStoreTransfer(const std::string& ip, const int16_t port, const int64_t fid, const int64_t start_at);
  bool recv_ActiveStoreTransfer();
  bool PasvStoreTransfer(const std::string& ip, const int16_t port, const int64_t fid, const int64_t start_at);
  void send_PasvStoreTransfer(const std::string& ip, const int16_t port, const int64_t fid, const int64_t start_at);
  bool recv_PasvStoreTransfer();
  bool ActiveRetrieveTransfer(const std::string& ip, const int16_t port, const int64_t fid, const int64_t start_at);
  void send_ActiveRetrieveTransfer(const std::string& ip, const int16_t port, const int64_t fid, const int64_t start_at);
  bool recv_ActiveRetrieveTransfer();
  bool PasvRetrieveTransfer(const std::string& ip, const int16_t port, const int64_t fid, const int64_t start_at);
  void send_PasvRetrieveTransfer(const std::string& ip, const int16_t port, const int64_t fid, const int64_t start_at);
  bool recv_PasvRetrieveTransfer();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SlaveServicesProcessor : public apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<SlaveServicesIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SlaveServicesProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ActiveStoreTransfer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PasvStoreTransfer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ActiveRetrieveTransfer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PasvRetrieveTransfer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SlaveServicesProcessor(boost::shared_ptr<SlaveServicesIf> iface) :
    iface_(iface) {
    processMap_["ActiveStoreTransfer"] = &SlaveServicesProcessor::process_ActiveStoreTransfer;
    processMap_["PasvStoreTransfer"] = &SlaveServicesProcessor::process_PasvStoreTransfer;
    processMap_["ActiveRetrieveTransfer"] = &SlaveServicesProcessor::process_ActiveRetrieveTransfer;
    processMap_["PasvRetrieveTransfer"] = &SlaveServicesProcessor::process_PasvRetrieveTransfer;
  }

  virtual ~SlaveServicesProcessor() {}
};

class SlaveServicesProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SlaveServicesProcessorFactory(const ::boost::shared_ptr< SlaveServicesIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SlaveServicesIfFactory > handlerFactory_;
};

class SlaveServicesMultiface : virtual public SlaveServicesIf {
 public:
  SlaveServicesMultiface(std::vector<boost::shared_ptr<SlaveServicesIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SlaveServicesMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SlaveServicesIf> > ifaces_;
  SlaveServicesMultiface() {}
  void add(boost::shared_ptr<SlaveServicesIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool ActiveStoreTransfer(const std::string& ip, const int16_t port, const int64_t fid, const int64_t start_at) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ActiveStoreTransfer(ip, port, fid, start_at);
    }
    return ifaces_[i]->ActiveStoreTransfer(ip, port, fid, start_at);
  }

  bool PasvStoreTransfer(const std::string& ip, const int16_t port, const int64_t fid, const int64_t start_at) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PasvStoreTransfer(ip, port, fid, start_at);
    }
    return ifaces_[i]->PasvStoreTransfer(ip, port, fid, start_at);
  }

  bool ActiveRetrieveTransfer(const std::string& ip, const int16_t port, const int64_t fid, const int64_t start_at) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ActiveRetrieveTransfer(ip, port, fid, start_at);
    }
    return ifaces_[i]->ActiveRetrieveTransfer(ip, port, fid, start_at);
  }

  bool PasvRetrieveTransfer(const std::string& ip, const int16_t port, const int64_t fid, const int64_t start_at) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PasvRetrieveTransfer(ip, port, fid, start_at);
    }
    return ifaces_[i]->PasvRetrieveTransfer(ip, port, fid, start_at);
  }

};

} // namespace

#endif
